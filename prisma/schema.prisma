generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user      String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  first_name   String?
  last_name    String?
  display_name String?
  password     String
  role_id      String
  phonenumber  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_verified  Boolean  @default(false)

  // Relations
  role           Role        @relation(fields: [role_id], references: [id_role])
  posts          Post[]      @relation("UserPosts")
  approved_posts Post[]      @relation("ApprovedPosts")
  user_oauth     UserOauth[]
  password_resets PasswordReset[]

  @@map("user")
}

model Role {
  id_role   String   @id @default(uuid())
  role_name RoleType @default(USER)

  // Relations
  users User[]

  @@map("role")
}

enum RoleType {
  ADMIN
  USER
  MODERATOR
}

model Post {
  id_post     String    @id @default(uuid())
  id_user     String
  id_place    String
  title       String
  image       String?
  body        String
  status      String    @default("pending")
  display     Boolean   @default(false)
  approved_by String?
  approved_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  user     User  @relation("UserPosts", fields: [id_user], references: [id_user])
  place    Place @relation(fields: [id_place], references: [id_place])
  approver User? @relation("ApprovedPosts", fields: [approved_by], references: [id_user])

  @@map("post")
}

model Place {
  id_place      String   @id @default(uuid())
  gg_ref        String?
  name_place    String
  place_type_id String
  latitude      Decimal
  longitude     Decimal
  province_id   String
  district      String?
  sub_district  String?
  place_image   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  place_type PlaceType  @relation(fields: [place_type_id], references: [id_place_type])
  province   MsProvince @relation(fields: [province_id], references: [id_province])
  posts      Post[]

  @@map("place")
}

model PlaceType {
  id_place_type String @id @default(uuid())
  type_name     String

  // Relations
  places Place[]

  @@map("place_type")
}

model MsProvince {
  id_province String  @id @default(uuid())
  name        String
  latitude    Decimal
  longitude   Decimal

  // Relations
  places Place[]

  @@map("ms_province")
}

model UserOauth {
  id_oauth         String   @id @default(uuid())
  provider         String
  provider_user_id String
  email            String
  user_id          String
  created_at       DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id_user])

  @@map("user_oauth")
}

model PasswordReset {
  id           String   @id @default(uuid())
  user_id      String
  token        String   @unique
  expires_at   DateTime
  used         Boolean  @default(false)
  created_at   DateTime @default(now())

  // Relations
  user         User     @relation(fields: [user_id], references: [id_user], onDelete: Cascade)

  @@map("password_reset")
}
