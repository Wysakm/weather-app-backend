"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startWeatherScheduler = startWeatherScheduler;
exports.stopWeatherScheduler = stopWeatherScheduler;
exports.getSchedulerStatus = getSchedulerStatus;
const weatherService_1 = require("../services/weatherService");
const weatherService = new weatherService_1.WeatherService();
/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏° Weather Scheduler ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
 * ‡πÉ‡∏ä‡πâ built-in auto-fetch ‡∏Ç‡∏≠‡∏á WeatherService ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ optimize ‡πÅ‡∏•‡πâ‡∏ß
 */
function startWeatherScheduler() {
    console.log('üöÄ Starting optimized weather scheduler...');
    // ‡πÉ‡∏ä‡πâ built-in auto-fetch ‡∏ó‡∏µ‡πà‡∏°‡∏µ retry logic ‡πÅ‡∏•‡∏∞ batch processing
    weatherService.startAutoFetch();
    console.log('‚úÖ Weather scheduler started with optimized auto-fetch (every 30 minutes)');
    console.log('üí° Features enabled: batch processing, retry logic, health monitoring');
}
/**
 * ‡∏´‡∏¢‡∏∏‡∏î Weather Scheduler
 */
function stopWeatherScheduler() {
    console.log('üõë Stopping weather scheduler...');
    weatherService.stopAutoFetch();
    console.log('‚úÖ Weather scheduler stopped');
}
/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Weather Scheduler
 */
async function getSchedulerStatus() {
    const [health, stats] = await Promise.all([
        weatherService.getSystemHealth(),
        weatherService.getSystemStatistics()
    ]);
    return {
        health,
        statistics: stats,
        timestamp: new Date().toISOString()
    };
}
