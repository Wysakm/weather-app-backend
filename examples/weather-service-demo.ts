// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô WeatherService ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà

import { WeatherService } from '../src/services/weatherService';

async function demonstrateNewWeatherService() {
  const weatherService = new WeatherService();

  console.log('=== ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Auto-Fetch ‡πÉ‡∏´‡∏°‡πà ===\n');

  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö...');
  const health = await weatherService.getSystemHealth();
  console.log('Health Status:', health.status);
  console.log('Services:', health.services);
  console.log('Data Records:', health.dataAvailability);
  console.log('');

  // 2. ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö
  console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö...');
  const stats = await weatherService.getSystemStatistics();
  console.log('Auto-fetch running:', stats.autoFetchRunning);
  console.log('Province coverage:', stats.provinceCoverage);
  console.log('');

  // 3. ‡πÄ‡∏£‡∏¥‡πà‡∏° auto-fetch
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto-Fetch...');
  weatherService.startAutoFetch();
  
  // ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
  console.log('üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° Auto-Fetch...');
  const status = weatherService.getAutoFetchStatus();
  console.log('Is Running:', status.isRunning);
  console.log('Current Interval:', (status.currentInterval / 1000 / 60).toFixed(1), 'minutes');
  console.log('Has Timeout Scheduled:', status.hasTimeoutScheduled);
  console.log('');

  // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô interval
  console.log('‚öôÔ∏è  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô interval ‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ...');
  weatherService.updateAutoFetchInterval(10 * 60 * 1000);
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const newStatus = weatherService.getAutoFetchStatus();
  console.log('New Interval:', (newStatus.currentInterval / 1000 / 60).toFixed(1), 'minutes');
  console.log('');

  // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö immediate fetch (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
  console.log('‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Immediate Fetch...');
  try {
    // Note: ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ mock data
    // const fetchResult = await weatherService.triggerImmediateFetch();
    // console.log('Fetch Result:', fetchResult);
    console.log('‚úÖ Immediate fetch would be triggered here');
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }
  console.log('');

  // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
  console.log('üõë ‡∏´‡∏¢‡∏∏‡∏î Auto-Fetch...');
  weatherService.stopAutoFetch();
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  const finalStatus = weatherService.getAutoFetchStatus();
  console.log('Final Status - Is Running:', finalStatus.isRunning);
  console.log('');

  // 8. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
  console.log('üéâ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà:');
  console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ overlapping executions');
  console.log('‚úÖ Adaptive interval ‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå');
  console.log('‚úÖ Manual control ‡πÑ‡∏î‡πâ');
  console.log('‚úÖ Better error handling');
  console.log('‚úÖ Resource-efficient');
  console.log('‚úÖ Production-ready');
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
demonstrateNewWeatherService().catch(console.error);

export { demonstrateNewWeatherService };
