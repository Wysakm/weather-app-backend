### ===== WEATHER APP - COMPLETE PASSWORD RESET TESTING =====
### This file provides comprehensive testing for password reset functionality
### Follow the numbered steps to test the complete workflow

### Variables
@baseUrl = http://localhost:3030
@testEmail = weatherapp168@gmail.com
@testPassword = TestPass123!
@testUsername = testuser123
@newPassword = NewPass456!
@resetToken = 
@invalidToken = invalid-token-12345

### ===== STEP 1: SETUP - REGISTER A TEST USER =====

### 1.1 Register Test User (if not exists)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}",
  "username": "{{testUsername}}"
}

### 1.2 Verify User Can Login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "{{testUsername}}",
  "password": "{{testPassword}}"
}

### ===== STEP 2: PASSWORD RESET WORKFLOW =====

### 2.1 Request Password Reset (Valid Email)
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 2.2 Request Password Reset (Non-existent Email - Should Still Return Success)
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "nonexistent@example.com"
}

### 2.3 Verify Reset Token (Valid Token)
# Note: Replace {{resetToken}} with actual token from email or server logs
POST {{baseUrl}}/api/auth/verify-reset-token
Content-Type: application/json

{
  "token": "{{resetToken}}"
}

### 2.4 Verify Reset Token (Invalid Token)
POST {{baseUrl}}/api/auth/verify-reset-token
Content-Type: application/json

{
  "token": "{{invalidToken}}"
}

### 2.5 Reset Password (Valid Token)
# Note: Replace {{resetToken}} with actual token from email or server logs
POST {{baseUrl}}/a
Content-Type: application/json

{
  "token": "{{resetToken}}",
  "newPassword": "{{newPassword}}"
}

### 2.6 Reset Password (Invalid Token)
POST {{baseUrl}}/api/auth/reset-password
Content-Type: application/json

{
  "token": "{{invalidToken}}",
  "newPassword": "{{newPassword}}"
}

### 2.7 Reset Password (Used Token - Should Fail)
POST {{baseUrl}}/api/auth/reset-password
Content-Type: application/json

{
  "token": "{{resetToken}}",
  "newPassword": "{{newPassword}}"
}

### ===== STEP 3: VERIFY PASSWORD CHANGE =====

### 3.1 Try Login with Old Password (Should Fail)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "{{testUsername}}",
  "password": "{{testPassword}}"
}

### 3.2 Login with New Password (Should Success)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "{{testUsername}}",
  "password": "{{newPassword}}"
}

### ===== STEP 4: RATE LIMITING TESTS =====

### 4.1 Test Rate Limiting - Multiple Forgot Password Requests
# Try to exceed the rate limit (5 requests per 15 minutes)

POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 4.2 Another Forgot Password Request
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 4.3 Another Forgot Password Request
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 4.4 Another Forgot Password Request
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 4.5 Another Forgot Password Request
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 4.6 This Should Be Rate Limited (6th request)
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### ===== STEP 5: VALIDATION TESTS =====

### 5.1 Reset Password with Weak Password
POST {{baseUrl}}/api/auth/reset-password
Content-Type: application/json

{
  "token": "{{resetToken}}",
  "newPassword": "weak"
}

### 5.2 Reset Password with Missing Token
POST {{baseUrl}}/api/auth/reset-password
Content-Type: application/json

{
  "newPassword": "{{newPassword}}"
}

### 5.3 Reset Password with Missing Password
POST {{baseUrl}}/api/auth/reset-password
Content-Type: application/json

{
  "token": "{{resetToken}}"
}

### 5.4 Forgot Password with Invalid Email
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{
  "email": "invalid-email"
}

### 5.5 Forgot Password with Missing Email
POST {{baseUrl}}/api/auth/forgot-password
Content-Type: application/json

{}

### ===== EXPECTED RESULTS =====

# Step 2.1: Should return 200 with success message
# Step 2.2: Should return 200 with success message (security - don't reveal if email exists)
# Step 2.3: Should return 200 with { "valid": true }
# Step 2.4: Should return 200 with { "valid": false }
# Step 2.5: Should return 200 with success message
# Step 2.6: Should return 400/401 with error message
# Step 2.7: Should return 400/401 with error message (token already used)
# Step 3.1: Should return 400/401 with invalid credentials
# Step 3.2: Should return 200 with user data and token
# Step 4.6: Should return 429 with rate limit error
# Step 5.1-5.5: Should return 400 with validation errors
